/* Copyright (C) 2009 Mobile Sorcery AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

int mNumTempAudioFiles = 1;
Hashtable<Integer, AudioStore> mAudioStores = new Hashtable<Integer, AudioStore>();

class AudioStore
{
	public int mOffset;
	public int mSize;
	public String mMimeType;
	public boolean mIsTmpFile;
	public String mTemporaryFileName;
	public int mResourceId;
	
	AudioStore(String mimeType, int offset, int size, String temporaryFileName)
	{
		Log.i("AudioStore","with file name");
		mIsTmpFile = true;
		mMimeType = mimeType;
		mOffset = offset;
		mSize = size;
		mTemporaryFileName = temporaryFileName;
	}
	
	AudioStore(String mimeType, int offset, int size, int resourceId)
	{
		Log.i("AudioStore","with resource id");
		mIsTmpFile = false;
		mMimeType = mimeType;
		mOffset = offset;
		mSize = size;
		mResourceId = resourceId;
	}
};

void addResourceAudio(MAHandle resHandle, int resourceId, int size, int offset, boolean isMAResource ) throws Exception
{
	InputStream is;
	if(isMAResource)
	{
		is = mCore.mContext.getResources().openRawResource(resourceId);
	}
	else
	{
		BinaryInterface bi = (BinaryInterface)getResource(resHandle);
		is = new LittleEndianDataInputStream(bi.getInputStream());
	}
	
	long s = is.skip(offset);
	
	String mimeType = readMimeString(is);
	size -= mimeType.length()+1;
	offset += mimeType.length()+1;
	
	if(isMAResource)
	{
		mAudioStores.put(resHandle, new AudioStore(mimeType, offset, size, resourceId)); 
	}
	else // not the submitted resource file, now we must store this as a temporary file
	{
		try 
		{
			// Read the file to memory
			byte[] buffer = new byte[size];
			is.read(buffer);
			
			// Create a temporary audio file
			String fileName = "MOSYNCTEMP:audio" + resHandle + ".tmp";
			FileOutputStream fos = mCore.mContext.openFileOutput(fileName,Context.MODE_WORLD_READABLE|Context.MODE_WORLD_WRITEABLE); 
			fos.write(buffer);
			fos.close();
			
			mAudioStores.put(resHandle, new AudioStore(mimeType, offset, size, fileName)); 
		}
		catch(Exception e)
		{
			Log.i("MoSync Exception", "Caught Exception:" + e);
		}
	}
}

SYSCALL(int) maSoundPlay(MAHandle soundResource, int offset, int length) throws Exception
{
	if(mMediaPlayer.isPlaying())
		mMediaPlayer.stop();
	
	AudioStore audioStore = (AudioStore)mAudioStores.get(new Integer(soundResource));
	if(audioStore == null) return -1;
	
	FileDescriptor fileDesc;
	if(audioStore.mIsTmpFile)
		fileDesc = mCore.mContext.openFileInput(audioStore.mTemporaryFileName).getFD();
	else
		fileDesc = mCore.mContext.getResources().openRawResourceFd(audioStore.mResourceId).getFileDescriptor();
/*	
	InputStream is = mCore.mContext.getResources().openRawResource(audioStore.mResourceId);
	
	is.skip(audioStore.mOffset);
	for(int i = 0; i < 100; i++)
		Log.i("reading"," - " + Integer.toHexString(is.read()));
*/		
//	mMediaPlayer.reset();
	mMediaPlayer.setDataSource(fileDesc, audioStore.mOffset+offset, length);
	mMediaPlayer.prepare();
	mMediaPlayer.start();
	
	return 1;
}

SYSCALL(void) maSoundStop() /* FIX-ME throws MediaException */ {
	if(mMediaPlayer.isPlaying()) mMediaPlayer.stop();
}	

SYSCALL(void) maSoundSetVolume(int vol) {	//vol is in range 0 - 100
	if(vol<0) vol = 0;
	else if(vol>100) vol = 100;
	mSoundVolume = vol;
	float volume = (float)mSoundVolume/100.0f;
	
	mMediaPlayer.setVolume(volume, volume);
}

SYSCALL(int) maSoundGetVolume() {
	return mSoundVolume;
}

// returns 1 if the sound is playing, otherwise 0
SYSCALL(int) maSoundIsPlaying() {
	if(mMediaPlayer.isPlaying()) return 1;
	return 0;
}

#ifdef MA_IX_AUDIOBUFFER
private final int maAudioBufferInit(int info) throws Exception {
	/* FIX-ME */
	return -1;
}

private final int maAudioBufferReady() throws Exception {
	/* FIX-ME */
	return -1;
}

private final int maAudioBufferClose() throws Exception {
	/* FIX-ME */
	return -1;
}
#endif

#ifdef MA_SUPPORT_STREAMING
NETSYSCALL(int) maSoundPlayConn(MAHandle conn, String mimeString) throws Exception {
	/* FIX-ME */
	return 1;
}
#endif	//MA_SUPPORT_STREAMING
