/* Copyright (C) 2009 Mobile Sorcery AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

package com.mosync.java.android;

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.os.Debug;
import android.view.Window;
import android.view.WindowManager;
import android.util.Log;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.Context;
import android.content.BroadcastReceiver;

import android.location.Location;
import android.location.LocationManager;
import android.location.LocationListener;
import android.location.LocationProvider;

import java.lang.Runnable;
import java.util.List;

#include "config_platform.h"

public class MoSync extends Activity implements LocationListener
{
	MoSyncView mMoSyncView;
	boolean paused;
	boolean mNoReload;
	
    @Override
    protected void onCreate(Bundle savedInstanceState)
	{
        super.onCreate(savedInstanceState);
		//Debug.startMethodTracing("mosync");
		paused = false;
		Log.i("MoSync", "onCreate");
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
        		WindowManager.LayoutParams.FLAG_FULLSCREEN);
				
		buildMoSyncView();
		setContentView(mMoSyncView);
    }
    
	/*
	* If this fails it will never return.. The application will be destroyed
	*/
	private void buildMoSyncView()
	{
		try {
			mMoSyncView = new MoSyncView(this);
        } catch(Exception e) {
			// No View was generated..
			Log.i("MoSync", "No view was generated.. app could not start!");
			super.onDestroy();
			this.finish();
		}
	}
	
    @Override
    protected void onStop()
	{
		super.onStop();
		mNoReload = mMoSyncView.mNoReload;
		
		// stop the thread but keep everything alive.
    	Log.i("MoSync","onStop");
    	mMoSyncView.stopThread();
		
		if(true == mNoReload) finish();
    }

	@Override
    protected void onRestart()
	{
		super.onRestart();
		
		if(true == mNoReload) finish();
		
		// reset the runtime and load the program and resource file again
    	Log.i("MoSync","onRestart");
		buildMoSyncView();
		setContentView(mMoSyncView);
    }
	
	@Override
    protected void onResume()
	{
		super.onResume();
		
		if(true == mNoReload) finish();
		
		registerReceiver(mBatteryReciever, new IntentFilter(Intent.ACTION_BATTERY_CHANGED)); 
		
    	Log.i("MoSync","onResume");
		if(paused)
		{
			mMoSyncView.postFocusGainedEvent();
			setContentView(mMoSyncView);
		}
    }

	@Override
    protected void onPause()
	{
		super.onPause();
		
		//Debug.stopMethodTracing();
		
		mNoReload = mMoSyncView.mNoReload;
		
		unregisterReceiver(mBatteryReciever);
		
		paused = true;
    	Log.i("MoSync","onPause");
		mMoSyncView.postFocusLostEvent();
		
		if(true == mNoReload) finish();
    }

	@Override
    protected void onDestroy()
	{
		super.onDestroy();
		
    	Log.i("MoSync","onDestroy");
		mMoSyncView.stopThread();
		finish();
		//mMosyncView.killApplication();
    }
	
	private BroadcastReceiver mBatteryReciever = new BroadcastReceiver()
	{
		@Override
		public void onReceive(Context context, Intent intent)
		{
			String action = intent.getAction();
			if (Intent.ACTION_BATTERY_CHANGED.equals(action))
			{
				int level = intent.getIntExtra("level", 0);
				int scale = intent.getIntExtra("scale", 100);

				int battery = ((level * 100) / scale);

				Log.i("MoSync", "Battery level:" + level + " scale:" + scale + " = " + battery);

				mMoSyncView.setBatteryCharge(battery);
			}
		}
    };
//}

	boolean mLocationActive = false;
	LocationManager mLocationManager;
	
	public boolean startLocation()
	{
		Log.i("startLocation","run 0");
		if(true == mLocationActive) return true;
		
		mLocationActive = true;
		
		Log.i("startLocation","run 1");
		
		mLocationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE); 
		if(mLocationManager == null) return false;
		
		List<String> provider = mLocationManager.getProviders(true);
		Log.i("startLocation", "providers:" + provider.toString());

		Log.i("startLocation","run 2");
		if(mLocationManager.isProviderEnabled(LocationManager.GPS_PROVIDER) == false) { Log.i("LocationEventThread", "No GPS provider enabled"); return false;}

		Log.i("startLocation","run 3");
		mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, this);

		Log.i("startLocation","run 4");	
		return true;
	}
	
	public void stopLocation()
	{
		mLocationManager.removeUpdates(this);
	}
	
	public void onLocationChanged(Location location) {
		Log.i("LocationEventThread","onLocationChanged");
		
		int[] event = new int[10];
//		EI_TYPE = EVENT_TYPE_LOCATION;
//		EI_STATE = MA_LOC_QUALIFIED;
		
//		writeDouble(event, 2, location.getLatitude());
//		writeDouble(event, 4, location.getLongitude());
//		writeDouble(event, 6, location.getAccuracy());
//		writeDouble(event, 8, location.getAccuracy());
//		mMoSyncView.postEvent(event);
	}
		
	public void onProviderDisabled(String provider) {
		Log.i("LocationEventThread","onProviderDisabled");
		if(provider == LocationManager.GPS_PROVIDER)
		{
		
			int[] event = new int[2];
//			EI_TYPE = EVENT_TYPE_LOCATION_PROVIDER;
//			EI_STATE = MA_LPS_OUT_OF_SERVICE;
			mMoSyncView.postEvent(event);

		}

	}
	public void onProviderEnabled(String provider) {
		Log.i("LocationEventThread","onProviderEnabled");
		
		if(provider == LocationManager.GPS_PROVIDER)
		{
			int[] event = new int[2];
//			EI_TYPE = EVENT_TYPE_LOCATION_PROVIDER;
//			EI_STATE = MA_LPS_AVAILABLE;
			mMoSyncView.postEvent(event);
		}
		
	}

	public void onStatusChanged(String provider, int status, Bundle extras) {
		Log.i("LocationEventThread","onStatusChanged");
		
		if(provider == LocationManager.GPS_PROVIDER)
		{
			int[] event = new int[2];
//			EI_TYPE = EVENT_TYPE_LOCATION_PROVIDER;
//			switch(status)
//			{
//				case LocationProvider.OUT_OF_SERVICE: EI_STATE = MA_LPS_OUT_OF_SERVICE; break;
//				case LocationProvider.TEMPORARILY_UNAVAILABLE: EI_STATE = MA_LPS_TEMPORARILY_UNAVAILABLE; break;
//				case LocationProvider.AVAILABLE: EI_STATE = MA_LPS_AVAILABLE; break;
//				default: EI_STATE = MA_LPS_TEMPORARILY_UNAVAILABLE;
//			}
			mMoSyncView.postEvent(event);		
		}
		
	}
	
}

