/* Copyright (C) 2009 Mobile Sorcery AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

package com.mosync.java.android;

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.view.Window;
import android.view.WindowManager;
import android.util.Log;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.Context;
import android.content.BroadcastReceiver;

import java.lang.Runnable;

#include "config_platform.h"

public class MoSync extends Activity
{
	MoSyncView mMosyncView;
	boolean paused;
	boolean mNoReload;
	
    @Override
    protected void onCreate(Bundle savedInstanceState)
	{
        super.onCreate(savedInstanceState);
		paused = false;
		Log.i("MoSync", "onCreate");
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
        		WindowManager.LayoutParams.FLAG_FULLSCREEN);
				
		buildMoSyncView();
		setContentView(mMosyncView);
    }
    
	/*
	* If this fails it will never return.. The application will be destroyed
	*/
	private void buildMoSyncView()
	{
		try {
			mMosyncView = new MoSyncView(this);
        } catch(Exception e) {
			// No View was generated..
			Log.i("MoSync", "No view was generated.. app could not start!");
			super.onDestroy();
			this.finish();
		}
	}
	
    @Override
    protected void onStop()
	{
		super.onStop();
		mNoReload = mMosyncView.mNoReload;
		
		// stop the thread but keep everything alive.
    	Log.i("MoSync","onStop");
    	mMosyncView.stopThread();
		
		if(true == mNoReload) finish();
    }

	@Override
    protected void onRestart()
	{
		super.onRestart();
		
		if(true == mNoReload) finish();
		
		// reset the runtime and load the program and resource file again
    	Log.i("MoSync","onRestart");
		buildMoSyncView();
		setContentView(mMosyncView);
    }
	
	@Override
    protected void onResume()
	{
		super.onResume();
		
		if(true == mNoReload) finish();
		
		registerReceiver(mBatteryReciever, new IntentFilter(Intent.ACTION_BATTERY_CHANGED)); 
		
    	Log.i("MoSync","onResume");
		if(paused)
		{
			mMosyncView.postFocusGainedEvent();
			setContentView(mMosyncView);
		}
    }

	@Override
    protected void onPause()
	{
		super.onPause();
		mNoReload = mMosyncView.mNoReload;
		
		unregisterReceiver(mBatteryReciever);
		
		paused = true;
    	Log.i("MoSync","onPause");
		mMosyncView.postFocusLostEvent();
		
		if(true == mNoReload) finish();
    }

	@Override
    protected void onDestroy()
	{
		super.onDestroy();
		
    	Log.i("MoSync","onDestroy");
		mMosyncView.stopThread();
		finish();
		//mMosyncView.killApplication();
    }
	
	private BroadcastReceiver mBatteryReciever = new BroadcastReceiver()
	{
		@Override
		public void onReceive(Context context, Intent intent)
		{
			String action = intent.getAction();
			if (Intent.ACTION_BATTERY_CHANGED.equals(action))
			{
				int level = intent.getIntExtra("level", 0);
				int scale = intent.getIntExtra("scale", 100);

				int battery = ((level * 100) / scale);

				Log.i("MoSync", "Battery level:" + level + " scale:" + scale + " = " + battery);

				mMosyncView.setBatteryCharge(battery);
			}
		}
    };
}

