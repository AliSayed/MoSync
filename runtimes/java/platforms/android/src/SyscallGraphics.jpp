/* Copyright (C) 2009 Mobile Sorcery AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

SYSCALL(int) maSetColor(int argb) {
	// defaults to fully invisible without this
	if(argb<=0xffffff) argb += 0xff000000;
	DEBUG("MoSync Syscall - maSetColor " + argb);
	
	int t = mPaint.getColor();
	mPaint.setColor(argb);
	mPaint.setAlpha(255);
	return t;
}

SYSCALL(void) maSetClipRect(int left, int top, int width, int height) {
	mCanvas.clipRect(left, top, left+width, top+height, Region.Op.REPLACE );
	mClipLeft = left;
	mClipTop = top;
	mClipWidth = width;
	mClipHeight = height;
}

SYSCALL(void) maGetClipRect(Address rect) {
#ifdef DEBUG_MEMORY
	MYASSERT((rect & 3) == 0);
#endif
	rect>>=2;
	int[] mem_ds = CORE.mMem_ds;
	mem_ds[rect] = mClipLeft;
	mem_ds[rect+1] = mClipTop;
	mem_ds[rect+2] = mClipWidth;
	mem_ds[rect+3] = mClipHeight;
}	

SYSCALL(void) maPlot(int posX, int posY) {
	DEBUG("MoSync Syscall - maPlot");
	mCanvas.drawPoint(posX, posY, mPaint);
}

SYSCALL(void) maLine(int startX, int startY, int endX, int endY) {
	DEBUG("MoSync Syscall - maLine");
	mCanvas.drawLine(startX, startY, endX, endY, mPaint);
}

SYSCALL(void) maFillRect(int left, int top, int sizeX, int sizeY) {
	DEBUG("MoSync Syscall - maFillRect");
	mCanvas.drawRect(left, top, left+sizeX, top+sizeY, mPaint);
}

/*
This implementation might seem a bit strange but it works so much better than using Canvas.drawVertices..
*/
SYSCALL(void) maFillTriangleStrip(Address address, int count) {
	DEBUG("maFillTriangleStrip");

	int i = 2;
	MYASSERT(count >= 3);
	address -= 4;
	int[] mem_ds = CORE.mMem_ds;
#define READ RINT(address += 4)

	Path path = new Path();

	int xa = READ;
	int ya = READ;

	int xb = READ;
	int yb = READ;
	for(;;) {
		int xc = READ;
		int yc = READ;
		path.moveTo(xa,ya);
		path.lineTo(xb,yb);
		path.lineTo(xc,yc);
		path.close();
		i++;
		if(i >= count)
			break;
		xa = READ;
		ya = READ;
		path.moveTo(xb,yb);
		path.lineTo(xc,yc);
		path.lineTo(xa,ya);
		path.close();
		i++;
		if(i >= count)
			break;
		xb = READ;
		yb = READ;
		path.moveTo(xc,yc);
		path.lineTo(xa,ya);
		path.lineTo(xb,yb);
		path.close();
		i++;
		if(i >= count)
			break;			
	}
	mCanvas.drawPath(path, mPaint);
}


SYSCALL(void) maFillTriangleFan(Address address, int count) {
	DEBUG("maFillTriangleFan");

		int i = 2;
		MYASSERT(count >= 3);
		address -= 4;
		int[] mem_ds = CORE.mMem_ds;
#define READ RINT(address += 4)

		Path path = new Path();

		int xa = READ;
		int ya = READ;

		int xb = READ;
		int yb = READ;
		for(;;) {
			int xc = READ;
			int yc = READ;
			path.moveTo(xa,ya);
			path.lineTo(xb,yb);
			path.lineTo(xc,yc);
			path.close();
			i++;
			if(i >= count)
				break;
			xb = READ;
			yb = READ;
			path.moveTo(xa,ya);
			path.lineTo(xc,yc);
			path.lineTo(xb,yb);
			path.close();
			i++;
			if(i >= count)
				break;			
		}
		mCanvas.drawPath(path, mPaint);
}	

Rect mTextSizeRect = new Rect();
SYSCALL(MAExtent) maGetTextSize(final String str) {
	mPaint.getTextBounds(str, 0, str.length(), mTextSizeRect);
	return EXTENT(mTextSizeRect.width(), mTextSizeRect.height());
}

SYSCALL(void) maDrawText(int left, int top, final String str) {
	DEBUG("MoSync Syscall - maDrawText :"+str+"\n");
	MAExtent e = maGetTextSize(str);
	mCanvas.drawText(str, left, top+EXTENT_Y(e), mPaint);
}

SYSCALL(void) maUpdateScreen() {
	DEBUG("MoSync Syscall - maUpdateScreen");
	Canvas lockedCanvas = null;
	try {
		lockedCanvas = mMoSyncView.mSurfaceHolder.lockCanvas(null);
		synchronized (mMoSyncView.mSurfaceHolder) {
			if(mUsingFrameBuffer)
			{
				int[] mem_ds = CORE.mMem_ds;	
				lockedCanvas.drawBitmap(mem_ds,(mFrameBufferAddress>>2),mWidth,0,0,
										mWidth,mHeight,false, mBlitPaint);
			}
			else
			{
				lockedCanvas.drawBitmap(mBitmap, 0, 0, mBlitPaint);
			}
		}
	} finally {
		if (lockedCanvas != null) {
			mMoSyncView.mSurfaceHolder.unlockCanvasAndPost(lockedCanvas);
		}
	}
	mCore.yield();
}

SYSCALL(MAExtent) maGetScrSize() {
	DEBUG("MoSync Syscall - maGetScrSize (width:" + mWidth + " height:" + mHeight + ")\n");
	return EXTENT(mWidth, mHeight);
}

SYSCALL(void) maDrawImage(MAHandle image, int left, int top) {
	DEBUG("MoSync Syscall - maDrawImage");
	mCanvas.drawBitmap(((ImageCache) getResource(image)).i, left, top, mPaint);
}

SYSCALL(void) maDrawRGB(MAPoint2d dstPoint, Address src, MARect srcRect, int scanlength) {
	DEBUG("maDrawRGB");

	int[] mem_ds = CORE.mMem_ds;
	mCanvas.drawBitmap(mem_ds, (src>>2) + MARect_left(srcRect) + MARect_top(srcRect) * scanlength,
		scanlength, MAPoint2d_x(dstPoint), MAPoint2d_y(dstPoint),
		MARect_width(srcRect), MARect_height(srcRect), true, mPaint);
}

private Bitmap mTempBitmap; 
SYSCALL(void) maDrawImageRegion(MAHandle image, MARect srcRect,
	MAPoint2d dstTopLeft, int transformMode) throws Exception
{	
	int[] mem_ds = CORE.mMem_ds;
	int srcRectLeft = MARect_left(srcRect);
	int srcRectTop = MARect_top(srcRect);
	int srcRectWidth = MARect_width(srcRect);
	int srcRectHeight = MARect_height(srcRect);
	int dstLeft = MAPoint2d_x(dstTopLeft);
	int dstTop = MAPoint2d_y(dstTopLeft);
	
	Bitmap bitmap = ((ImageCache)getResource(image)).i;
	
	final int imgHeight = bitmap.getHeight();
	if(srcRectTop > imgHeight)
		return;
	final int imgWidth = bitmap.getWidth();
	if(srcRectLeft > imgWidth)
		return;
	if(srcRectTop < 0) {
		srcRectHeight += srcRectTop;
		srcRectTop = 0;
	}
	if(srcRectLeft < 0) {
		srcRectWidth += srcRectLeft;
		srcRectLeft = 0;
	}
	if(srcRectTop + srcRectHeight > imgHeight) {
		srcRectHeight = imgHeight - srcRectTop;
	}
	if(srcRectLeft + srcRectWidth > imgWidth) {
		srcRectWidth = imgWidth - srcRectLeft;
	}
	if(srcRectWidth <= 0 || srcRectHeight <= 0)
		return;
	
	if(transformMode == TRANS_NONE)
	{
		mCanvas.clipRect(dstLeft, dstTop, dstLeft+srcRectWidth, dstTop+srcRectHeight, Region.Op.REPLACE);
		mCanvas.drawBitmap(bitmap, dstLeft-srcRectLeft, dstTop-srcRectTop, mPaint);
		mCanvas.clipRect(mClipLeft, mClipTop, mClipLeft+mClipWidth, mClipTop+mClipHeight, Region.Op.REPLACE );
	}
	else
	{
		boolean mirror = false;
		int rotation = 0;
		
		switch(transformMode)
		{
			case TRANS_ROT90:
				rotation = 90;
				break;
			case TRANS_ROT180:
				rotation = 180;
				break;
			case TRANS_ROT270:
				rotation = 270;
				break;
			case TRANS_MIRROR:
				mirror = true;
				break;
			case TRANS_MIRROR_ROT90:
				mirror = true;
				rotation = 90;
				break;
			case TRANS_MIRROR_ROT180:
				mirror = true;
				rotation = 180;
				break;
			case TRANS_MIRROR_ROT270:
				mirror = true;
				rotation = 270;
				break;
			default:
				BIG_PHAT_ERROR;
		}
		
		Matrix transformationMatrix = new Matrix();
		if(mirror)
		{
			transformationMatrix.setScale(-1, 1);
			transformationMatrix.postTranslate(imgWidth, 0);
		}
		if(rotation != 0) {
			transformationMatrix.postRotate(rotation);
		}
		
		mTempBitmap = Bitmap.createBitmap(bitmap, srcRectLeft, srcRectTop,
								srcRectWidth, srcRectHeight, transformationMatrix, false);
		
		mCanvas.drawBitmap(mTempBitmap, dstLeft, dstTop, mPaint);
	}
}


SYSCALL(MAHandle) maInitLayer(MAHandle tileResource, MAHandle mapResource,
	int layerSizeX, int layerSizeY)
{
	DEBUG("maInitLayer");
/* FIXME
	Tileset tileset = (Tileset)getResource(tileResource);

	TiledLayer layer = new TiledLayer(layerSizeX, layerSizeY, tileset.image,
		tileset.tileSizeX, tileset.tileSizeY);

	mTiledLayers.addElement(layer);
	MAHandle ret = mTiledLayers.size()-1;

	maSetMap(ret, mapResource, 0, 0);

	return ret;
*/
	return -1;
}

SYSCALL(void) maDisposeLayer(MAHandle layer) {
	DEBUG("maDisposeLayer");
/* FIXME	
	mTiledLayers.setElementAt(null, layer);
*/		
}

SYSCALL(void) maSetMap(MAHandle layer, MAHandle srcMapResource, int destX, int destY) {	
	DEBUG("maSetMap");
/* FIXME	
	Tilemap map = (Tilemap)getResource(srcMapResource);
	TiledLayer destLayer = (TiledLayer)mTiledLayers.elementAt(layer);

	int tileSizeX = destLayer.getCellWidth();
	int tileSizeY = destLayer.getCellHeight();

	int layerWidth = destLayer.getColumns();
	int layerHeight = destLayer.getRows();

	int xStart = MAX(destX,0);
	int xEnd = MAX(MIN(destX + map.width, layerWidth), 0);
	int yStart = MAX(destY,0);
	int yEnd = MAX(MIN(destY + map.height, layerHeight), 0);

	int srcOffX = - destX;
	int srcOffY = - destY;

	for(int i = yStart; i < yEnd; i++) {
		for(int j = xStart; j < xEnd; j++) {
			destLayer.setCell(j, i, map.getValue(j + srcOffX, i + srcOffY));
		}
	}
*/		
}

SYSCALL(void) maChangeTileSet(MAHandle layer, MAHandle tileResource) {
	DEBUG("maChangeTileSet");
/* FIXME	
	TiledLayer destLayer = (TiledLayer)mTiledLayers.elementAt(layer);
	Tileset tileset = (Tileset)getResource(tileResource);
	destLayer.setStaticTileSet(tileset.image, tileset.tileSizeX, tileset.tileSizeY);
*/		
}

SYSCALL(void) maDrawLayer(MAHandle layer, int offsetX, int offsetY) {
	DEBUG("maDrawLayer");
/* FIXME	
	TiledLayer destLayer = (TiledLayer)mTiledLayers.elementAt(layer);
	destLayer.setPosition(offsetX, offsetY);
	destLayer.paint(mGraphics);
*/		
}

SYSCALL(void) maSetTile(MAHandle layer, int x, int y, int tileNumber) {
	DEBUG("maSetTile");
/* FIXME	
	TiledLayer destLayer = (TiledLayer)mTiledLayers.elementAt(layer);
	destLayer.setCell(x,y, tileNumber);
*/		
}

SYSCALL(MAExtent) maGetImageSize(MAHandle image) {
	DEBUG("maImageSize");
	Bitmap bitmap = ((ImageCache) getResource(image)).i;
	return EXTENT(bitmap.getWidth(), bitmap.getHeight());
}

SYSCALL(void) maGetImageData(MAHandle image, Address dst, MARect srcRect, int scanlength) {
	DEBUG("maGetImageData");

	Bitmap bitmap = ((ImageCache)getResource(image)).i;
	int[] mem_ds = CORE.mMem_ds;
	bitmap.getPixels(mCore.mMem_ds, dst>>2, scanlength, MARect_left(srcRect), MARect_top(srcRect),
		MARect_width(srcRect), MARect_height(srcRect));
}

SYSCALL(MAHandle) maSetDrawTarget(MAHandle handle) {
	DEBUG("maSetDrawTarget");
/* FIXME	
	MAHandle temp = mDrawTargetHandle;
	if(mDrawTarget != null) {
		setResource(mDrawTargetHandle, mDrawTarget);
		mDrawTarget = null;
	}
	if(handle == HANDLE_SCREEN) {
		mGraphics = mCanvasGraphics;
	} else {
		ImageCache ic = (ImageCache)getResource(handle);
		if(ic.g == null)
			ic.g = ic.i.getGraphics();
		mGraphics = ic.g;
		setResource(handle, mFlux);
		mDrawTarget = ic;
	}
	mDrawTargetHandle = handle;
	return temp;
*/ 
	return -1;
}

SYSCALL(int) maCreateImageFromData(MAHandle placeholder, MAHandle data, int offset, int size) 
	throws Exception
{
	DEBUG("maCreateImageFromData in:" + data + " out: " + placeholder);
	
	BinaryInterface bi = (BinaryInterface)getResource(data);
	MYASSERT(bi.size() >= offset + size);
	InputStream is = bi.getInputStream();
	is.skip(offset);
	try {
		LittleEndianDataInputStream ledis = new LittleEndianDataInputStream(is);
		byte[] b = new byte[size];
		ledis.readFully(b);
		Bitmap decodedImage = BitmapFactory.decodeByteArray(b, 0, b.length);
		if(decodedImage == null)
		{
			return RES_BAD_INPUT;
		}
		addResource(placeholder, new ImageCache(decodedImage));
		ledis.close();
	} catch(java.lang.IllegalArgumentException e) {
		return RES_BAD_INPUT;
	} catch(java.lang.OutOfMemoryError e) {
		return RES_OUT_OF_MEMORY;
	}
	return RES_OK;
}

SYSCALL(int) maCreateImageRaw(MAHandle placeholder, Address src, MAExtent size, int alpha) 
	throws Exception
{
	DEBUG("maCreateImageRaw");

	MYASSERT(BYTEPART(src) == 0);
	int width = EXTENT_X(size);		
	int height = EXTENT_Y(size);

	try {
		int[] tempArray = new int[width*height];
		System.arraycopy(CORE.mMem_ds, INTPART(src), tempArray, 0, width*height);

		// Fix this line
		Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
		bitmap.setPixels(tempArray, 0, width, 0, 0, width, height);
		addResource(placeholder, new ImageCache(bitmap));

	} catch(java.lang.OutOfMemoryError e) {
		return RES_OUT_OF_MEMORY;
	}
	return RES_OK;
}

SYSCALL(int) maCreateDrawableImage(MAHandle placeholder, int width, int height) THE {
	DEBUG("maCreateDrawableImage");
	try {
		addResource(placeholder, new ImageCache(Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)));
	} catch(java.lang.OutOfMemoryError e) {
		return RES_OUT_OF_MEMORY;
	}
	return RES_OK;
}

int maFrameBufferGetInfo(Address info) 
{
	DEBUG("maFrameBufferGetInfo");
	int addr = info;
	int[] mem_ds = CORE.mMem_ds;
	WINT(addr+0, mWidth*mHeight*4); //int sizeInBytes;
	WINT(addr+4, 4); // int bytesPerPixel;
	WINT(addr+8, 24); // int bitsPerPixel;
	WINT(addr+12, 0x00ff0000); // int redMask;
	WINT(addr+16, 16); // int redShift;
	WINT(addr+20, 8); // int redBits;
	WINT(addr+24, 0x0000ff00); // int greenMask;
	WINT(addr+28, 8); // int greenShift;
	WINT(addr+32, 8); // int greenBits;
	WINT(addr+36, 0x000000ff); // int blueMask;
	WINT(addr+40, 0); // int blueShift;
	WINT(addr+44, 8); // int blueBits;
	WINT(addr+48, mWidth); // int width;
	WINT(addr+52, mHeight); // int height;
	WINT(addr+56, mWidth<<2); // int pitch;
	WINT(addr+60, 0); // int supportsGfxSyscalls;
	return 1;			
}

int maFrameBufferInit(Address data) 
{
	DEBUG("maFrameBufferInit");
	mFrameBufferAddress = data;
	mUsingFrameBuffer = true;
	return 1;
}

int maFrameBufferClose()
{
	DEBUG("maFrameBufferClose");
	mUsingFrameBuffer = false;
	return 1;
}

#ifdef MA_PROF_SUPPORT_OPENGL_ES
#include "opengl_non_generated.jpp"
#endif
