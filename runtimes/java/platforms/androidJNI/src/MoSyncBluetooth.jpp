/* Copyright (C) 2010 MoSync AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

final static int REQUEST_ENABLE_BT = 2;
static BluetoothAdapter mBluetoothAdapter = null;
static boolean mBluetoothGetNames = false;

int maBtStartDeviceDiscovery(int names) throws Exception
{
	if(0 != names) mBluetoothGetNames = true;

	Log.i("maBtStartDeviceDiscovery", "0");
	
	if(null == mBluetoothAdapter)
	{
		Log.i("maBtStartDeviceDiscovery", "1");
		mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		Log.i("maBtStartDeviceDiscovery", "2");
		if(null == mBluetoothAdapter)
		{
			Log.i("maBtStartDeviceDiscovery", "NO DEFAULT ADAPTER AVAILABLE!");
			return -1;
		}
		Log.i("maBtStartDeviceDiscovery", "3");
	}

	if ( !mBluetoothAdapter.isEnabled() )
	{
		Intent btPermissionIntent = new Intent (BluetoothAdapter.ACTION_REQUEST_ENABLE);
		((Activity)mContext).startActivityForResult(btPermissionIntent, REQUEST_ENABLE_BT);
		
		mContext.registerReceiver(new BroadcastReceiver()
		{
			@Override
			public void onReceive(Context context, Intent i)
			{		
				int newState = i.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF);
				if (newState == BluetoothAdapter.STATE_ON)
				{
					context.unregisterReceiver(this);
					mBluetoothAdapter.startDiscovery();
				}
			}
		}, new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED));
		
		mBluetoothAdapter.enable();
	}

	mBluetoothAdapter.startDiscovery();
	
	Log.i("maBtStartDeviceDiscovery", "4");
	mContext.registerReceiver(mBluetoothReciever, null);
	
	
	return 0;
}

int maBtGetNewDevice(Address dst)
{
	/* FIX-ME */
	return -1;
}

void maBtStartServiceDiscovery(Address dev, Address uuid) throws Exception
{
	/* FIX-ME */
}

int maBtGetNewService(Address dst) throws Exception
{
	/* FIX-ME */
	return -1;
}

int maBtGetNextServiceSize(Address dst) throws Exception
{
	/* FIX-ME */
	return -1;
}

void killBluetooth()
{
	mContext.unregisterReceiver(mBluetoothReciever);
}

private BroadcastReceiver mBluetoothReciever = new BroadcastReceiver()
{
	@Override
	public void onReceive(Context context, Intent intent)
	{		
		final String action = intent.getAction();
		if (action.equals(BluetoothDevice.ACTION_FOUND))
		{
			BluetoothDevice rbd = (BluetoothDevice)intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
			int rssi = intent.getIntExtra(BluetoothDevice.EXTRA_RSSI, Integer.MIN_VALUE);
			
			Log.i("mBluetoothReciever", "found device!");
			//RemoteDevice2Impl tobounce = new RemoteDevice2Impl(rbd, rssi);
			//scanListener.deviceFound(tobounce);
		}
		else if (action.equals(BluetoothAdapter.ACTION_DISCOVERY_FINISHED))
		{
			Log.i("mBluetoothReciever", "scan complete!");
			//scanListener.scanCompleted();
		}

	}
};
