
/**
 * Wrapper for Native UI Syscalls to avoid cluttering
 * the MoSyncSyscalls file, also to call the native ui
 * functions in the UI thread.
 */
 
/**
 * Internal wrapper for maWidgetCreate that runs
 * the call in the UI thread.
 */
public int maWidgetCreate(final String type)
{
	Log.i("MoSync", "MoSyncThread.maWidgetCreate");
	try
	{
		final AsyncWait<Integer> waiter = new AsyncWait();
		mHandler.post(new Runnable() {
			public void run()
			{
				int result = mNativeUI.maWidgetCreate(type);
				waiter.setResult(result);
			}
		});
		return waiter.getResult();
	}
	catch(InterruptedException ie)
	{
		Log.i("MoSync", "Native UI update interrupted.");
		return -1;
	}
}

/**
 * Internal wrapper for maWidgetDestroy that runs
 * the call in the UI thread.
 */
public int maWidgetDestroy(final int widget)
{
	Log.i("MoSync", "MoSyncThread.maWidgetDestroy");
	try
	{
		final AsyncWait<Integer> waiter = new AsyncWait();
		mHandler.post(new Runnable() {
			public void run()
			{
				int result = mNativeUI.maWidgetDestroy(widget);
				waiter.setResult(result);
			}
		});
		return waiter.getResult();
	}
	catch(InterruptedException ie)
	{
		return -1;
	}
}

/**
 * Internal wrapper for maWidgetAddChild that runs
 * the call in the UI thread.
 */
public int maWidgetAddChild(final int parentHandle, final int childHandle)
{
	Log.i("MoSync", "MoSyncThread.maWidgetAddChild");
	
	try
	{
		final AsyncWait<Integer> waiter = new AsyncWait();
		mHandler.post(new Runnable() {
			public void run()
			{
				int result = mNativeUI.maWidgetAdd(parentHandle, childHandle);	
				waiter.setResult(result);
			}
		});
		return waiter.getResult();
	}
	catch(InterruptedException ie)
	{
		return -1;
	}
}

/**
 * Internal wrapper for maWidgetRemoveChild that runs
 * the call in the UI thread.
 */
public int maWidgetRemoveChild(final int parentHandle, final int childHandle)
{
	Log.i("MoSync", "MoSyncThread.maWidgetRemoveChild");
	try
	{
		final AsyncWait<Integer> waiter = new AsyncWait();
		mHandler.post(new Runnable() {
			public void run()
			{
				int result = mNativeUI.maWidgetRemove(parentHandle, childHandle);
				waiter.setResult(result);
			}
		});
		return waiter.getResult();
	}
	catch(InterruptedException ie)
	{
		return -1;
	}
}


/**
 * Internal wrapper for maWidgetScreenShow that runs
 * the call in the UI thread.
 */
public int maWidgetScreenShow(final int screenHandle)
{
	Log.i("MoSync", "MoSyncThread.maWidgetScreenShow");
	try
	{
		final AsyncWait<Integer> waiter = new AsyncWait();
		mHandler.post(new Runnable() {
			public void run()
			{
				int result = mNativeUI.maWidgetScreenShow(screenHandle);
				mContext.setRootView( mNativeUI.getRootView( ) );

				waiter.setResult(result);
			}
		});
		return waiter.getResult();
	}
	catch(InterruptedException ie)
	{
		return -1;
	}
}

/**
 * Internal wrapper for maWidgetSetProperty that runs
 * the call in the UI thread.
 */
public int maWidgetSetProperty(final int widgetHandle, final String key, final String value)
{
	Log.i("MoSync", "MoSyncThread.maWidgetSetProperty");
	try
	{
		final AsyncWait<Integer> waiter = new AsyncWait();
		mHandler.post(new Runnable() {
			public void run()
			{
				int result = mNativeUI.maWidgetSetProperty(widgetHandle, key, value);
				waiter.setResult(result);
			}
		});
		return waiter.getResult();
	}
	catch(InterruptedException ie)
	{
		return -1;
	}
}
