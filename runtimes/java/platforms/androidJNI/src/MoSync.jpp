/* Copyright (C) 2010 MoSync AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

package com.mosync.java.android;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;

import android.view.Window;
import android.view.WindowManager;

import android.util.Log;
import java.util.Locale;

import android.os.Handler;

import com.mosync.internal.android.MoSyncThread;
import com.mosync.internal.android.MoSyncView;
import com.mosync.internal.android.MoSyncWebView;

#include "generated\IX_WEBVIEW_CONSTS.h"

import android.content.res.Configuration;
import android.content.Context;

public class MoSync extends Activity
{
	MoSyncView mMoSyncView;
	MoSyncWebView mMoSyncWebView;
	MoSyncThread mMoSyncThread;
	Intent mMoSyncServiceIntent;
	
	/**
	 * Handler used to run code on the UI thread.
	 */
	Handler mHandler;
	
	boolean mThreadHasDied = false;
	boolean mIsPaused = false;
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
	
		Log.i("MoSync", "onCreate");
		
		super.onCreate(savedInstanceState);
		
		if(mThreadHasDied) this.finish();
		
		//this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        //this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
		
		mMoSyncView = null;
		mMoSyncWebView = null;
		
		mHandler = new Handler();
		
		try 
		{
			mMoSyncThread = new MoSyncThread(this); // TODO: Delete if not needed: , new Handler());
		}
		catch(Exception e) 
		{
			Log.e("MoSync", "Unable to create thread! Application is closed!");
			super.onDestroy();
			this.finish();
		}
		
		createMoSyncView();
		
		setContentView(mMoSyncView);
		// TODO: Restore if needed: mMoSyncThread.setMoSyncView(mMoSyncView);
		
    }
	
	private void createMoSyncView()
	{
		Log.i("MoSync", "createMoSyncView");
		try 
		{
			mMoSyncView = new MoSyncView(this, mMoSyncThread);
        } 
		catch(Exception e) 
		{
			Log.e("MoSync", "No view was generated.. app could not start!");
			super.onDestroy();
			this.finish();
		}
	}
	
	public MoSyncView getMoSyncView()
	{
		return mMoSyncView;
	}

	@Override
	public void onConfigurationChanged(Configuration config)
	{
		super.onConfigurationChanged(config);

		setContentView(mMoSyncView);
	}
	
    @Override
    protected void onStop()
	{
		super.onStop();
		Log.i("MoSync","onStop");
		
		mThreadHasDied = mMoSyncThread.isDead();
		
		// The view is destroyed, inform the thread about this
		// TODO: Restore if needed: mMoSyncThread.setMoSyncView(null);
	}

	@Override
    protected void onRestart()
	{
		super.onRestart();
		Log.i("MoSync","onRestart");
		
		if(mThreadHasDied) this.finish();
		
		// create a new view and inform the thread about this
		createMoSyncView();
	}
	
	@Override
    protected void onResume()
	{
		super.onResume();
		Log.i("MoSync","onResume");
		
		if(mThreadHasDied) this.finish();
		
		// this should be dealt with differently
		//registerReceiver(mBatteryReciever, new IntentFilter(Intent.ACTION_BATTERY_CHANGED)); 
		
		if(mIsPaused == true)
		{
			mIsPaused = false;
			
			//mMoSyncView.postFocusGainedEvent();
			setContentView(mMoSyncView);
			// TODO: Delete this line: mMoSyncThread.setMoSyncView(mMoSyncView);
		}
    }

	@Override
    protected void onPause()
	{
		super.onPause();
		Log.i("MoSync","onPause");
		
		mThreadHasDied = mMoSyncThread.isDead();
			
		//unregisterReceiver(mBatteryReciever);
		
		mIsPaused = true;
  
		//mMoSyncView.postFocusLostEvent();		
    }

	@Override
    protected void onDestroy()
	{
		super.onDestroy();	
    	Log.i("MoSync","onDestroy");
		
		mThreadHasDied = mMoSyncThread.isDead();
		
		//stopService(mMoSyncServiceIntent);
		
		//mMoSyncView.stopThread();
		finish();
		//mMosyncView.killApplication();
    }
	
	public int maWebViewOpen()
	{
		// Open only if there is no WebView open.
		if (null == mMoSyncWebView)
		{
			final Context context = this;
			mHandler.post(new Runnable() { 
				public void run() { 
					mMoSyncWebView = new MoSyncWebView(context, mMoSyncThread);
					setContentView(mMoSyncWebView);
					mMoSyncWebView.requestFocus(); } });
			return WEBVIEW_OK;
		}
		else
		{
			return WEBVIEW_ERROR;
		}
	}
	
	public int maWebViewClose()
	{
		if (null != mMoSyncWebView)
		{
			mHandler.post(new Runnable() { 
				public void run() { 
					mMoSyncWebView.close();
					mMoSyncWebView = null;
					setContentView(mMoSyncView); } });
			return WEBVIEW_OK;
		}
		else
		{
			return WEBVIEW_NOT_OPEN;
		}
	}
	
	public int maWebViewSetHTML(final String html)
	{
		if (null != mMoSyncWebView)
		{
			mHandler.post(new Runnable() { 
				public void run() { mMoSyncWebView.setHTML(html); } });
			return WEBVIEW_OK;
		}
		else
		{
			return WEBVIEW_NOT_OPEN;
		}
	}

	public int maWebViewLoadURL(final String url)
	{
		if (null != mMoSyncWebView)
		{
			mHandler.post(new Runnable() { 
				public void run() { mMoSyncWebView.loadURL(url); } });
			return WEBVIEW_OK;
		}
		else
		{
			return WEBVIEW_NOT_OPEN;
		}
	}

	public int maWebViewEvaluateScript(final String script)
	{
		if (null != mMoSyncWebView)
		{
			mHandler.post(new Runnable() { 
				public void run() { mMoSyncWebView.evaluateScript(script); } });
			return WEBVIEW_OK;
		}
		else
		{
			return WEBVIEW_NOT_OPEN;
		}
	}
	
	public int maWebViewGetRequestSize(int requestID)
	{
		if (null != mMoSyncWebView)
		{
			return mMoSyncWebView.getRequestSize(requestID);
		}
		else
		{
			return WEBVIEW_NOT_OPEN;
		}
	}
	
	public byte[] maWebViewGetRequestBytes(int requestID)
	{
		if (null != mMoSyncWebView)
		{
			return mMoSyncWebView.getRequestBytes(requestID);
		}
		else
		{
			return null;
		}
	}
}
