/* Copyright (C) 2010 MoSync AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

package com.mosync.java.android;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;

import android.view.Window;
import android.view.WindowManager;

import android.util.Log;
import java.util.Locale;

import android.os.Handler;

public class MoSync extends Activity {

	MoSyncView mMoSyncView;
	MoSyncThread mMoSyncThread;
	Intent mMoSyncServiceIntent;
	
	boolean mIsPaused = false;
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		Log.i("MoSync", "onCreate");
		
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
		
		mMoSyncView = null;
		
		try{
			mMoSyncThread = new MoSyncThread(this, new Handler());
		}
		catch(Exception e)
		{
			Log.e("MoSync", "Unable to create thread! Application is closed!");
			super.onDestroy();
			this.finish();
		}
		
		createMoSyncView();
		
		setContentView(mMoSyncView);
		mMoSyncThread.setMoSyncView(mMoSyncView);
    }
	
	private void createMoSyncView()
	{
		Log.i("MoSync", "createMoSyncView");
		try {
			mMoSyncView = new MoSyncView(this, mMoSyncThread);
        } catch(Exception e) {
			Log.e("MoSync", "No view was generated.. app could not start!");
			super.onDestroy();
			this.finish();
		}
	}
	
    @Override
    protected void onStop()
	{
		super.onStop();
		Log.i("MoSync","onStop");
		
		// The view is destroyed, inform the service about this
		mMoSyncThread.setMoSyncView(null);
	}

	@Override
    protected void onRestart()
	{
		super.onRestart();
		Log.i("MoSync","onRestart");
		
		// create a new view and inform the service about this
		createMoSyncView();
	}
	
	@Override
    protected void onResume()
	{
		super.onResume();
		Log.i("MoSync","onResume");
			
		// this should be dealt with differently
		//registerReceiver(mBatteryReciever, new IntentFilter(Intent.ACTION_BATTERY_CHANGED)); 
		
		if(mIsPaused == true)
		{
			mIsPaused = false;
			
			//mMoSyncView.postFocusGainedEvent();
			setContentView(mMoSyncView);
			mMoSyncThread.setMoSyncView(mMoSyncView);
		}
    }

	@Override
    protected void onPause()
	{
		super.onPause();
		Log.i("MoSync","onPause");
		
		//unregisterReceiver(mBatteryReciever);
		
		mIsPaused = true;
  
		//mMoSyncView.postFocusLostEvent();		
    }

	@Override
    protected void onDestroy()
	{
		super.onDestroy();	
    	Log.i("MoSync","onDestroy");
		
		//stopService(mMoSyncServiceIntent);
		
		//mMoSyncView.stopThread();
		finish();
		//mMosyncView.killApplication();
    }
	
}
