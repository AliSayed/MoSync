// THIS CLASS IS NOT USED - KEPT HERE FOR REFERENCE

/* Copyright (C) 2010 MoSync AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

package com.mosync.java.android;

#include "generated\IX_WEBVIEW_CONSTS.h"
//#include "config_platform.h"
//#include "helpers.h"

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Toast;

/**
 * Activity that contains a WebView instance.
 */
public class MoSyncWebViewActivity extends Activity 
{
	//public static Handler mHandler;

	/**
	 * The one and only instance of this activity.
	 * This is truly crappy, but will do for now.
	 */
	static MoSyncWebViewActivity Instance;
	
	/** 
	 * The WebView instance of this Activity. 
	 */
	WebView webview;
	
	/**
	 * Handler used to run code on the UI thread.
	 */
	Handler handler;
	
	/**
	 * Holds the latest request.
	 */
	String request;
	
	@Override
	public void onCreate(Bundle savedInstanceState) 
	{
		Log.i("MoSync", "MoSyncWebViewActivity.onCreate");
		
		handler = new Handler();
		Instance = this;
		
		super.onCreate(savedInstanceState);
		
		webview = new WebView(this);
		webview.getSettings().setJavaScriptEnabled(true);
		//webview.addJavascriptInterface(this, "activity");
		
		// Create WebViewClient object to handle WebView events.
		final MoSyncWebViewActivity activity = this;
		webview.setWebViewClient(new WebViewClient() 
		{
			public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) 
			{
				Toast.makeText(activity, "WebView Error: " + description, Toast.LENGTH_SHORT).show();
			}
			
			public boolean shouldOverrideUrlLoading(WebView view, String url)
			{
				String mosyncProtocol = "mosync://";
				
				Log.i("MoSync", "MoSyncWebViewActivity.WebViewClient.shouldOverrideUrlLoading");
				if (url.startsWith(mosyncProtocol))
				{
					Log.i("MoSync", "Processing MoSync url: " + url);
					
					// Post regest message to MoSync.
					
					// Allocate event array.
					int[] event = new int[3];
					
					// Set event type.
					event[0] = EVENT_TYPE_WEBVIEW_REQUEST;
					
					// Set request id.
					// TODO: Hardcoded for now, fix this.
					event[1] = 1;
					
					// Save request.
					// TODO: Save requests in something like a circular buffer.
					request = url.substring(mosyncProtocol.length());
					
					// Post event to MoSync event system.
					postMoSyncEvent(event);
					
					// Abort further processing of this url by the WebView by returning true.
					return true;
				}
				else
				{
					Log.i("MoSync", "Processing standard url: " + url);
					
					// Do normal url processing by returning false.
					return false;
				}
			}
		});
		
		String html = "<html><body>New WebView</body></html>";
		webview.loadData(html, "text/html", "utf-8");
		
		setContentView(webview);

		// Post notification message to MoSync.
		int[] event = new int[3];
		event[0] = EVENT_TYPE_WEBVIEW_OPENED;
		postMoSyncEvent(event);
	}
	
	// TODO: Impelement this method if this code should be used again.
	private void postMoSyncEvent(int[] event)
	{
		// Commented out because MoSync protocol has changed.
		// MoSync.getInstance().getMoSyncView().postEvent(event);
	}
	
	public static MoSyncWebViewActivity getInstance()
	{
		return Instance;
	}
	
/* 
// Old code from MoSyncSyscalls.jpp
// Old version that opens a new activity with a WebView.
int maWebViewOpen()
{
	Log.i("MoSync", "maWebViewOpen - launching intent");
	
	((Activity) mMoSyncView.getContext()).runOnUiThread(new Runnable() 
	{
		public void run() 
		{
			try 
			{		
				Intent myIntent = new Intent(mMoSyncView.getContext(), WebViewActivity.class);
				mMoSyncView.getContext().startActivity(myIntent);
			}
			catch (Throwable e)
			{
				Log.e("MoSync", "maWebViewOpen - error");
				e.printStackTrace();
			}
		}
	});
	
	// TODO: Wait here for the WebView to be created? Better to post events.
	// But the post event mechanism should queue events until the WebView is created.
	
	return 1;
}
*/

	public int close()
	{
		// Close activity.
		finish();
		
		// Notification event to MoSync is posted in onDestroy().
		
		return 1;
	}
	
	public int setHTML(final String html)
	{
		Log.i("MoSync", "MoSyncWebViewActivity.setHTML");
		handler.post(new Runnable() { 
			public void run() { 
				webview.loadData(html, "text/html", "utf-8"); //"ISO-8859-1" "utf-8" // TODO: Fix encoding
				} });
				
		// Post notification message to MoSync.
		// TODO: Move to a listener where this is notified.
		int[] event = new int[3];
		event[0] = EVENT_TYPE_WEBVIEW_PAGE_LOADED;
		postMoSyncEvent(event);
		
		return 1;
	}
	
	public int loadURL(final String url)
	{
		Log.i("MoSync", "MoSyncWebViewActivity.loadURL");
		handler.post(new Runnable() { 
			public void run() { 
				webview.loadUrl(url); } });
				
		// Post notification message to MoSync.
		// TODO: Move to a listener where this is notified.
		int[] event = new int[3];
		event[0] = EVENT_TYPE_WEBVIEW_PAGE_LOADED;
		postMoSyncEvent(event);
		
		return 1;
	}
	
	/**
	 * Use the bookmarklet technique to run a script in the WebView.
	 * http://en.wikipedia.org/wiki/Bookmarklet
	 */
	public int evaluateScript(final String script)
	{
		Log.i("MoSync", "MoSyncWebViewActivity.evaluateScript");
		handler.post(new Runnable() { 
			public void run() { 
				webview.loadUrl("javascript: " + script); } });
		return 1;
	}
	
	public int getRequestSize(int requestID)
	{
		return request.length() + 1;
	}
	
	public byte[] getRequestBytes(int requestID)
	{
		return request.getBytes();
	}
	
	@Override
    protected void onStart() 
	{
    	Log.i("MoSync", "MoSyncWebViewActivity.onStart");
    	super.onStart();
    }
	
	@Override
    protected void onStop() 
	{
    	Log.i("MoSync", "MoSyncWebViewActivity.onStop");
    	super.onStop();
    }
	
	@Override
    protected void onRestart() 
	{
    	Log.i("MoSync", "MoSyncWebViewActivity.onRestart");
        super.onRestart();
    }
	
	@Override
    protected void onResume() 
	{
    	Log.i("MoSync", "MoSyncWebViewActivity.onResume");
        super.onResume();
    }
	
	@Override
    protected void onPause() 
	{
    	Log.i("MoSync", "MoSyncWebViewActivity.onPause");
        super.onPause();
    }
	
	@Override
    protected void onDestroy()
	{
    	Log.i("MoSync", "MoSyncWebViewActivity.onDestroy");
		super.onDestroy();
		
		// Post notification message to MoSync.
		int[] event = new int[3];
		event[0] = EVENT_TYPE_WEBVIEW_CLOSED;
		postMoSyncEvent(event);
    }
}
