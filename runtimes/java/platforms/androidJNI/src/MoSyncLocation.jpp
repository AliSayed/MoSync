/* Copyright (C) 2010 MoSync AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

boolean mLocationActive = false;
LocationEventThread mLocationEventThread = null;

public final int maLocationStart() throws Exception
{
	if(false == mLocationActive)
	{
		mLocationEventThread = new LocationEventThread();
		mLocationEventThread.start();
	}
	mLocationActive = true;
	
	return 1;
}

public final int maLocationStop()
{
	mLocationEventThread.kill();
	mLocationActive = false;
	
	return 1;
}


class LocationEventThread extends Thread implements LocationListener
{
	Handler mHandler;
	LocationManager mLocationManager;

	public LocationEventThread()
	{
		Log.i("LocationEventThread","constructor");

	}

	public void kill()
	{
		mLocationManager.removeUpdates(this);
		Looper loop = Looper.myLooper();
		if(null != loop)
			loop.quit();
	}
	
	public void run()
	{
		Log.i("LocationEventThread","run");
		
		try
		{
			Looper.prepare();
		} catch(Exception e)
		{
			Log.e("loc thread", "e:" + e.toString());
		}

		mHandler = new Handler()
		{
			public void handleMessage(Message msg)
			{
				SYSLOG("location handler msg:" + msg.toString());
			}
		};
	
		mLocationManager = (LocationManager) mContext.getSystemService(Context.LOCATION_SERVICE); 
		if(mLocationManager == null) return;
	
		if(mLocationManager.isProviderEnabled(LocationManager.GPS_PROVIDER) == false) return;

		mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, this);
			
		Looper.loop();
	}

	public void onLocationChanged(Location location)
	{
		Log.i("LocationEventThread","onLocationChanged");
		int[] event = new int[11];
		EI_TYPE = EVENT_TYPE_LOCATION;
		EI_STATE = MA_LOC_QUALIFIED;

		// LATITUDE
		long lat = Double.doubleToLongBits(location.getLatitude());
		event[2] = (int)lat; event[3] = ((int)(lat >> 32));
		
		// LONGITUDE
		long lon = Double.doubleToLongBits(location.getLongitude());
		event[4] = (int)lon; event[5] = ((int)(lon >> 32));
		
		// ACCURACCY
		long acc = Double.doubleToLongBits(location.getAccuracy());
		event[6] = (int)acc; event[7] = ((int)(acc >> 32));
		event[8] = (int)acc; event[9] = ((int)(acc >> 32));
		
		// ALTITUDE
		event[10] = (int) Float.floatToIntBits((float)location.getAltitude());

		nativePostEvent(event);
	}
		
	public void onProviderDisabled(String provider)
	{
		Log.i("LocationEventThread","onProviderDisabled provider:" + provider);
		if(provider.equals("gps"))
		{
			int[] event = new int[2];
			EI_TYPE = EVENT_TYPE_LOCATION_PROVIDER;
			EI_STATE = MA_LPS_OUT_OF_SERVICE;
			nativePostEvent(event);
		}
	}
	
	public void onProviderEnabled(String provider)
	{
		Log.i("LocationEventThread","onProviderEnabled provider:" + provider);
		if(provider.equals("gps"))
		{
			int[] event = new int[2];
			EI_TYPE = EVENT_TYPE_LOCATION_PROVIDER;
			EI_STATE = MA_LPS_AVAILABLE;
			nativePostEvent(event);
		}
	}

	public void onStatusChanged(String provider, int status, Bundle extras)
	{
		Log.i("LocationEventThread","onStatusChanged provider:" + provider);
		if(provider.equals("gps"))
		{
			int[] event = new int[2];
			EI_TYPE = EVENT_TYPE_LOCATION_PROVIDER;
			
			switch(status)
			{
				case LocationProvider.OUT_OF_SERVICE: EI_STATE = MA_LPS_OUT_OF_SERVICE; break;
				case LocationProvider.TEMPORARILY_UNAVAILABLE: EI_STATE = MA_LPS_TEMPORARILY_UNAVAILABLE; break;
				case LocationProvider.AVAILABLE: EI_STATE = MA_LPS_AVAILABLE; break;
				default: EI_STATE = MA_LPS_TEMPORARILY_UNAVAILABLE; 
			}
			
			nativePostEvent(event);
		}
	}

}
