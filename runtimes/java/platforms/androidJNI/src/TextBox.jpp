/* Copyright (C) 2010 MoSync AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/



package com.mosync.java.android;

#include "helpers.h"
#include "generated/MAAPI_consts.h"

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.os.Handler;
import android.view.Display;
import android.view.Gravity;
import android.view.Window;
import android.view.WindowManager;
import android.content.Intent;
import android.text.InputType;

import java.nio.CharBuffer;

/**
* This class is an implementation of a text box dialog.
* It shows a fullscreen text fiels with OK and Cancel buttons.
*
* Clicking OK retrieves the text entered by the user and puts it into
* a buffer specified in the maTextBox IOCtl, pushes a MoSync event and
* then dismisses the dialog.
* Clicking cancel only dismisses the dialog.
*/
public class TextBox extends Activity implements OnClickListener {

	public Handler mHandler;
	private Button mOkButton;
	private Button mCancelButton;
	private EditText mEdit;
	private TextView mLabel;
	private int mOutputMemPtr;
	private int mConstraints;
	

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		// Set a handler to this thread
		mHandler= new Handler();
		
		// Fullscreen mode
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
			WindowManager.LayoutParams.FLAG_FULLSCREEN);
		
		// Get screen dimansions
		Display display = getWindowManager().getDefaultDisplay(); 
		int width = display.getWidth();
		int height = display.getHeight();
		
		// Get parameters from the parent activity
		Bundle bundle = this.getIntent().getExtras();
		String title = bundle.getString("TITLE");
		String text = bundle.getString("TEXT");
		mOutputMemPtr = bundle.getInt("OUTPUT");
		mConstraints = bundle.getInt("CONSTRAINTS");
		
		// Check if the input type constraint has a correct value,
		// if not set it to the default value,
		// i.e. normal text
		if (mConstraints < 0 || mConstraints > 5)
			mConstraints = 0;
			
		// Initialize an array containing the different
		// input type constraints possible, for quick conversion from
		// MoSync input type constraints to Android input type constraints.
		// Therefore, order matters :)
		int[] constraintsArray = 
		{
			InputType.TYPE_CLASS_TEXT,
			InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS,
			InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_SIGNED,
			InputType.TYPE_CLASS_PHONE,
			InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_URI,
			InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL | InputType.TYPE_NUMBER_FLAG_SIGNED
		};
			
		// Initialize layout components
		mEdit = new EditText(this);
		mEdit.setWidth(width);
		mEdit.setHeight(height/3);
		mEdit.setGravity(Gravity.TOP);
		mEdit.setText(text);
		mEdit.setInputType(constraintsArray[mConstraints]);
		mCancelButton = new Button(this);
		mCancelButton.setText("Cancel");
		mCancelButton.setId(1000);
		mCancelButton.setOnClickListener(this);
		mOkButton = new Button(this);
		mOkButton.setText("OK");
		mOkButton.setId(1001);
		mOkButton.setOnClickListener(this);
		mLabel = new TextView(this);
		mLabel.setText(title);
		
		// Add buttons to a sub-layout
		LinearLayout horizontalLayout = new LinearLayout(this);
		horizontalLayout.addView(mCancelButton);
		horizontalLayout.addView(mOkButton);
		
		// Add components to the global layout
		LinearLayout verticalLayout = new LinearLayout(this);
		verticalLayout.setOrientation(LinearLayout.VERTICAL);
		verticalLayout.addView(mLabel);
		verticalLayout.addView(mEdit);
		verticalLayout.addView(horizontalLayout);

		// Show the global layout
		setContentView(verticalLayout);
	}

	protected void onStop() {
		super.onStop();
	}

	protected void onRestart() {
		super.onRestart();
	}

	protected void onResume() {
		super.onResume();
	}

	protected void onPause() {
		super.onPause();
	}

	protected void onStart() {
		super.onStart();
	}

	@Override
	public void onClick(View v) {
		if( v.getId() == mOkButton.getId() ) {
			Log.i("InputBox", "OK clicked.");
			String output = mEdit.getText().toString();
			
			// Write text directly to the MoSync memory
			char[] ca = output.toCharArray();
			MoSync.mMoSyncThread.mMemDataSection.mark();
			MoSync.mMoSyncThread.mMemDataSection.position(mOutputMemPtr);
			
			CharBuffer cb = MoSync.mMoSyncThread.mMemDataSection.asCharBuffer();
			
			cb.put(ca);
			cb.put((char)0);
			
			MoSync.mMoSyncThread.mMemDataSection.reset();
			
			// Notice that data is available
			int[] event = new int[3];
			event[0] = EVENT_TYPE_TEXTBOX;
			event[1] = MA_TB_RES_OK;
			event[2] = output.length();
			MoSync.mMoSyncThread.postEvent(event);
			
			Log.i("InputBox", "event" + output.length());
			Log.i("InputBox", "event" + event[1]);
		
			// Send a focus gained event now when get returns to the application
			event[0] = EVENT_TYPE_FOCUS_GAINED;
			MoSync.mMoSyncThread.postEvent(event);
		
			finish();
		}
		if( v.getId() == mCancelButton.getId() ) {
			Log.i("InputBox", "Cancel clicked.");
			String output = mEdit.getText().toString();
			
			// Write text directly to the MoSync memory
			byte[] ba = output.getBytes();
			MoSync.mMoSyncThread.mMemDataSection.mark();
			MoSync.mMoSyncThread.mMemDataSection.position(mOutputMemPtr);
			MoSync.mMoSyncThread.mMemDataSection.put(ba);
			MoSync.mMoSyncThread.mMemDataSection.put((byte)0);
			MoSync.mMoSyncThread.mMemDataSection.reset();
			
			// Notice that the user clicked cancel
			int[] event = new int[3];
			event[0] = EVENT_TYPE_TEXTBOX;
			event[1] = MA_TB_RES_CANCEL;
			event[2] = 0;
			MoSync.mMoSyncThread.postEvent(event);
			
			finish();
		}
	}
}
