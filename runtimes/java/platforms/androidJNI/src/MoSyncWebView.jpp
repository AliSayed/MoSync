/* Copyright (C) 2010 MoSync AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

package com.mosync.internal.android;

#include "generated\IX_WIDGET_CONSTS.h"
//#include "config_platform.h"
//#include "helpers.h"

import android.content.Context;
import android.util.Log;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Toast;

import com.mosync.java.android.MoSync;

/**
 * MoSync WebView class.
 */
public class MoSyncWebView extends WebView 
{
	public static final String MoSyncProtocol = "mosync://";
	
	/**
	 * The MoSync handle id for this widget instance.
	 */
	protected int mWidgetHandle;
	
	protected Context mContext;
	protected MoSyncThread mMoSyncThread;
	
	/**
	 * Holds the most recent command sent to MoSync.
	 */
	protected String mMessage;
	
	public MoSyncWebView(
		final Context context, 
		final MoSyncThread moSyncThread,
		final int widgetHandle) //throws Exception
	{
		super(context);
		
		Log.i("MoSyncWebView", "Constructor");
		
		mWidgetHandle = widgetHandle;
		mContext = context;
		mMoSyncThread = moSyncThread;
		
		getSettings().setJavaScriptEnabled(true);
		
		// Experimented with these settings to solve a focus issue,
		// but it was solved by overriding onCheckIsTextEditor().
		//setFocusable(true);
		//setFocusableInTouchMode(true);
		
		// Create WebViewClient object to handle WebView events.
		setWebViewClient(new WebViewClient() 
		{
			public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) 
			{
				String error = "Error: " + description;
				Log.e("MoSyncWebView", error);
				Toast.makeText(context, error, Toast.LENGTH_SHORT).show();
			}
			
			/**
			 * If the url is a mosync: url, we post 
			 * a command event to MoSync.
			 */	
			public boolean shouldOverrideUrlLoading(WebView view, String url)
			{
				Log.i("MoSync", "WebViewActivity.WebViewClient.shouldOverrideUrlLoading");
				if (url.startsWith(MoSyncProtocol))
				{
					Log.i("MoSync", "Processing MoSync url: " + url);
					
					// Save message in a lookup table.
					String messageString = url.substring(MoSyncProtocol.length());
					int messageId = mMoSyncThread.mWidgetTable.storeMessage(messageString.getBytes());
					postEvent(EVENT_TYPE_WIDGET_MESSAGE, messageId);
					
					// Abort further processing of this url by the WebView by returning true.
					return true;
				}
				else
				{
					Log.i("MoSync", "Processing standard url: " + url);
					
					// Do normal url processing by returning false.
					return false;
				}
			}
		});
		
		// Don not set default content.
		//String html = "<html><body>New WebView</body></html>";
		//loadData(html, "text/html", "utf-8");
	}
	
	/**
	 * This method is needed to make the WebView (this view) gain
	 * focus on touch events. See Android Issue: 7189
	 * http://code.google.com/p/android/issues/detail?id=7189
	 */
	@Override
	public boolean onCheckIsTextEditor() 
	{
		return true; 
	}
	
	/* Alternative way of solving the focus problem in Android Issue 7198.
	   This has NOT been tested.
	@Override
	public boolean onTouchEvent(MotionEvent event)
	{
		requestFocusFromTouch();
		return super.onTouchEvent(event);
	}*/
	
	/**
	 * Post an event to the MoSync event queue.
	 * The event data is organised as an array of ints.
	 * The first element is the type of the event.
	 */
	public void postEvent(int eventType, int messageId)
	{
		((MoSync) mContext).postWidgetEvent(eventType, mWidgetHandle, messageId);
	}
	
	public void loadHTML(final String html)
	{
		Log.i("MoSync", "MoSyncWebView.loadHTML");
		
		// Use loadDataWithBaseURL to avoid URI-encoding data, For details, see:
		// http://developer.android.com/reference/android/webkit/WebView.html#loadData(java.lang.String, java.lang.String, java.lang.String)
		// http://code.google.com/p/android/issues/detail?id=1593
		// http://code.google.com/p/android/issues/detail?id=1733
		
		//loadData(html, "text/html", "utf-8"); // ISO-8859-1
		loadDataWithBaseURL(null, html, "text/html", "utf-8", null);
		
		// Post notification message to MoSync.
		// TODO: Move to a listener where this is notified.
		postEvent(EVENT_TYPE_WIDGET_CONTENT_LOADED, 0);
	}
	
	public void loadURL(final String url)
	{
		Log.i("MoSync", "MoSyncWebView.loadURL");
		
		loadUrl(url);
				
		// Post notification message to MoSync.
		// TODO: Move to a listener where this is notified.
		postEvent(EVENT_TYPE_WIDGET_CONTENT_LOADED, 0);
	}
	
	/**
	 * Use the bookmarklet technique to run a script in the WebView.
	 * http://en.wikipedia.org/wiki/Bookmarklet
	 * @param script The script must start with "javascript:"
	 * @return WIDGET_OK or WIDGET_ERROR
	 */
	public int evaluateScript(final String script)
	{
		Log.i("MoSync", "MoSyncWebView.evaluateScript");
		
		// Ensure thet the script starts with "javascript:".
		if (script.startsWith("javascript:"))
		{
			loadUrl(script);
			return WIDGET_OK;	
		}
		else
		{
			return WIDGET_ERROR;
		}
	}
}
