/* Copyright (C) 2010 MoSync AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

package com.mosync.internal.android;

#include "generated\IX_WEBVIEW_CONSTS.h"
//#include "config_platform.h"
//#include "helpers.h"

import android.content.Context;
import android.util.Log;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Toast;

/**
 * MoSync WebView class.
 */
public class MoSyncWebView extends WebView 
{
	public static final String MoSyncProtocol = "mosync://";
	
	protected Context mContext;
	protected MoSyncThread mMoSyncThread;
	
	/**
	 * Holds the most recent request sent to MoSync.
	 */
	protected String mRequest;
	
	public MoSyncWebView(final Context context, final MoSyncThread moSyncThread) //throws Exception
	{
		super(context);
		
		Log.i("MoSyncWebView", "Constructor");
		
		mContext = context;
		mMoSyncThread = moSyncThread;
		
		getSettings().setJavaScriptEnabled(true);
		
		//setFocusable(true);
		//setFocusableInTouchMode(true);
		
		// Create WebViewClient object to handle WebView events.
		setWebViewClient(new WebViewClient() 
		{
			public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) 
			{
				String error = "Error: " + description;
				Log.e("MoSyncWebView", error);
				Toast.makeText(context, error, Toast.LENGTH_SHORT).show();
			}
			
			public boolean shouldOverrideUrlLoading(WebView view, String url)
			{
				Log.i("MoSync", "WebViewActivity.WebViewClient.shouldOverrideUrlLoading");
				if (url.startsWith(MoSyncProtocol))
				{
					Log.i("MoSync", "Processing MoSync url: " + url);
					
					// Post regest message to MoSync.
					
					// Allocate event array.
					int[] event = new int[3];
					
					// Set event type.
					event[0] = EVENT_TYPE_WEBVIEW_REQUEST;
					
					// Set request id.
					// TODO: Hardcoded for now, fix this.
					event[1] = 1;
					
					// Save request.
					// TODO: Save requests in something like a circular buffer.
					mRequest = url.substring(MoSyncProtocol.length());
					
					// Post event to MoSync event system.
					postEvent(event);
					
					// Abort further processing of this url by the WebView by returning true.
					return true;
				}
				else
				{
					Log.i("MoSync", "Processing standard url: " + url);
					
					// Do normal url processing by returning false.
					return false;
				}
			}
		});
		
		String html = "<html><body>New WebView</body></html>";
		loadData(html, "text/html", "utf-8");
		
		// Post notification message to MoSync.
		int[] event = new int[3];
		event[0] = EVENT_TYPE_WEBVIEW_OPENED;
		postEvent(event);
	}
	
	/**
	 * This method is needed to make the WebView (this view) gain
	 * focus on touch events. See Android Issue: 7189
	 * http://code.google.com/p/android/issues/detail?id=7189
	 */
	@Override
	public boolean onCheckIsTextEditor() 
	{
		return true; 
	}
	
	/* Alternative way of solving the focus problem in Android Issue 7198.
	   This has NOT been tested.
	@Override
	public boolean onTouchEvent(MotionEvent event)
	{
		requestFocusFromTouch();
		return super.onTouchEvent(event);
	}*/
	
	/**
	 * Post an event to the MoSync event queue.
	 * The event data is organised as an array of ints.
	 * The first element is the id of the event.
	 */
	private void postEvent(int[] event)
	{
		//Log.i("MoSyncWebView", "postEvent: " + event[0]);
		
		mMoSyncThread.nativePostEvent(event);
		mMoSyncThread.interrupt();
	}
	
	public void setHTML(final String html)
	{
		Log.i("MoSync", "MoSyncWebView.setHTML");
		
		// Use loadDataWithBaseURL to avoid URI-encoding data, For details, see:
		// http://developer.android.com/reference/android/webkit/WebView.html#loadData(java.lang.String, java.lang.String, java.lang.String)
		// http://code.google.com/p/android/issues/detail?id=1593
		// http://code.google.com/p/android/issues/detail?id=1733
		
		//loadData(html, "text/html", "utf-8"); // ISO-8859-1
		loadDataWithBaseURL(null, html, "text/html", "utf-8", null);
		
		// Post notification message to MoSync.
		// TODO: Move to a listener where this is notified.
		int[] event = new int[3];
		event[0] = EVENT_TYPE_WEBVIEW_PAGE_LOADED;
		postEvent(event);
	}
	
	public void loadURL(final String url)
	{
		Log.i("MoSync", "MoSyncWebView.loadURL");
		
		loadUrl(url);
				
		// Post notification message to MoSync.
		// TODO: Move to a listener where this is notified.
		int[] event = new int[3];
		event[0] = EVENT_TYPE_WEBVIEW_PAGE_LOADED;
		postEvent(event);
	}
	
	/**
	 * Use the bookmarklet technique to run a script in the WebView.
	 * http://en.wikipedia.org/wiki/Bookmarklet
	 */
	public void evaluateScript(final String script)
	{
		Log.i("MoSync", "MoSyncWebView.evaluateScript");
		
		loadUrl("javascript: " + script); 
	}
	
    public void close()
	{
    	Log.i("MoSync", "MoSyncWebView.close");
		
		// Post notification message to MoSync.
		int[] event = new int[3];
		event[0] = EVENT_TYPE_WEBVIEW_CLOSED;
		postEvent(event);
    }
	
	public int getRequestSize(int requestID)
	{
		// TODO: Check that request exists. Return error code on error.
		return mRequest.length() + 1;
	}
	
	public byte[] getRequestBytes(int requestID)
	{
		// TODO: Check that request exists. Return null on error.
		return mRequest.getBytes();
	}
}
