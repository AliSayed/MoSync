/* Copyright (C) 2009 Mobile Sorcery AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

#include "IX_AUDIOBUFFER_CONSTS.h"
#include "helpers.h"

import java.io.*;

// Takes a stream with PCM data in a specified format.
// Outputs a WAV file header, followed by the PCM data.
// The length of the PCM data must not be greater than 2 GiB.
// That is the limit of the WAV header format.

final class Pcm2WavInputStream extends InputStream {
	//private final int mFmt, mSampleRate, mNumChannels;
	private final InputStream mPcmStream;

	private byte[] mHeader;
	private ByteArrayInputStream mHeaderStream;

	private InputStream mCurrentStream;

	Pcm2WavInputStream(InputStream pcmStream, int fmt, int sampleRate, int numChannels,
		int bufferSize)
		throws IOException
	{
		mPcmStream = pcmStream;
		int bytesPerSample;
		switch(fmt) {
		case AUDIO_FMT_S8:
		case AUDIO_FMT_U8:
			bytesPerSample = 1;
			break;
		case AUDIO_FMT_S16:
		case AUDIO_FMT_U16:
			bytesPerSample = 2;
			break;
		default:
			BIG_PHAT_ERROR;
		}

		mHeader = new byte[44];
		RefByteArrayOutputStream ho = new RefByteArrayOutputStream(mHeader, 0);
		ho.write("RIFF".getBytes());
		ho.writeLeInt(0x7FFFFFFF);	//max len
		ho.write("WAVEfmt ".getBytes());
		ho.writeLeInt(16);	//fmt chunk len
		ho.writeLeShort((short)1);	//PCM format
		ho.writeLeShort((short)numChannels);
		ho.writeLeInt(sampleRate);
		ho.writeLeInt(sampleRate * bytesPerSample * numChannels);	//bytes per second
		ho.writeLeShort((short)(bytesPerSample * numChannels));
		ho.writeLeShort((short)(bytesPerSample * 8));	//bits per sample
		ho.write("data".getBytes());
		ho.writeLeInt(bufferSize);
		//we should now have written 44 bytes to the header
		DEBUG_ALWAYS(new String(mHeader) + "\n");

		mHeaderStream = new ByteArrayInputStream(mHeader);
		mCurrentStream = mHeaderStream;
	}

	final public int read() throws IOException {
		int res = mCurrentStream.read();
		if(res < 0) {
			if(mCurrentStream == mHeaderStream) {
				//switch to PCM stream
				mCurrentStream = mPcmStream;
				return mCurrentStream.read();
			}
		}
		return res;
	}

	final public int read(byte[] b, int off, int len) throws IOException	{
		int res = mCurrentStream.read(b, off, len);
		if(res < 0) {
			if(mCurrentStream == mHeaderStream) {
				//switch to PCM stream
				mCurrentStream = mPcmStream;
				return mCurrentStream.read(b, off, len);
			}
		}
		return res;
	}

	final public int available() throws IOException {
		return mCurrentStream.available();
	}

	final public long skip(long n) throws IOException {
		return mCurrentStream.skip(n);
	}
}
