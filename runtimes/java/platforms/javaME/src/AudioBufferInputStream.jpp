/* Copyright (C) 2009 Mobile Sorcery AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

#include "IX_AUDIOBUFFER_CONSTS.h"
#include "helpers.h"

import java.io.*;

final class AudioBufferInputStream extends InputStream {
	private final byte[] mBuffer;
	private final int mAddress;
	private final int[] mem_ds;
	private final MainCanvas mCanvas;
	private int mPos;

	AudioBufferInputStream(MainCanvas canvas, int[] mem, int address, int bufferSize) {
		mBuffer = new byte[bufferSize];
		mAddress = address;
		this.mem_ds = mem;
		mCanvas = canvas;
		mPos = mBuffer.length;
	}

	private final void sendEvent() {
		//DEBUG_SOUND("sendEvent\n");
		int[] event = new int[1];
		EI_TYPE = EVENT_TYPE_AUDIOBUFFER_FILL;
		mCanvas.postEvent(event);
	}

	public final synchronized void ready() {
		DEBUG_SOUND("ABIS.ready()\n");
		MYASSERT(mPos == mBuffer.length);
		mPos = 0;
		notify();
	}

	public final synchronized void checkBuffer() {
		if(mPos == mBuffer.length) {
			sendEvent();
			while(true) {
				try {
					DEBUG_SOUND("ABIS.wait()\n");
					wait();
					//only if the wait was not interrupted, but properly notified, will the loop end.
					DEBUG_SOUND("ABIS.wait completed!\n");
					break;
				} catch(InterruptedException e) {
					PRINT_STACK_TRACE;
				}
			}
			DEBUG_ASSERT(mPos == 0);
		}
	}

	public final synchronized int read() {
		DEBUG_SOUND("ABIS.read()\n");
		checkBuffer();
		return mBuffer[mPos++];
	}

	public final synchronized int read(byte[] b, int off, int len) {
		DEBUG_SOUND("ABIS.read("+b.length+", "+off+", "+len+")\n");
		checkBuffer();
		int actual = MIN(len, mBuffer.length - mPos);
		System.arraycopy(mBuffer, mPos, b, off, actual);
		mPos += actual;
		return actual;
	}
}
