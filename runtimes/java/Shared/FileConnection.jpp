/* Copyright (C) 2009 Mobile Sorcery AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

#include "FileConnection.h"

#if 0
//***************************************************************************
//Helper Functions
//***************************************************************************
//Supports only *, but any number of them. Ignores case.
final boolean wildcardMatch(String s, String filter) {
	int wildIndex = filter.indexOf('*');
	if(wildIndex < 0)	//no wildcard
		return s.equalsIgnoreCase(filter);
	
	//first region
	if(!s.regionMatches(true, 0, filter, 0, wildIndex))
		return false;

	int pos = wildIndex;

	int nextWildIndex = wildIndex;
	do {
		wildIndex = nextWildIndex;
		nextWildIndex = filter.indexOf('*', wildIndex + 1);
	} while(nextWildIndex == wildIndex + 1);	//consecutive wildcards shall have no effect

	if(nextWildIndex < 0)	//only one wildcard
		return s.indexOf(filter.substring(wildIndex + 1), pos) >= 0;

	//second region
	String sub = filter.substring(wildIndex + 1, nextWildIndex);
	if(s.indexOf(sub, pos) < 0)
		return false;
	pos += sub.length();

		//if(!s.regionMatches(true, , filter, 
}
#endif

//***************************************************************************
//Proper Syscall Functions
//***************************************************************************

final int maFileListStart(String path, String filter) {
	Enumeration en;
	FileConnection fc = null;
	if(path.length() == 0) {
		en = FileSystemRegistry.listRoots();
	} else {
		try {
			fc = (FileConnection)Connector.open("file:///" + path +
				(path.charAt(path.length() - 1) == '/' ? "" : "/"), Connector.READ);
			if(!fc.exists())
				return FLERR_NOTFOUND;
			en = fc.list(filter, true);
		} catch(IOException e) {
			PRINT_STACK_TRACE;
			return FLERR_GENERIC;
		} catch(SecurityException e) {
			PRINT_STACK_TRACE;
			return FLERR_GENERIC;
		}
	}
	FileListing fl = new FileListing();
	fl.en = en;
	fl.fc = fc;
	mFileListings.put(new Integer(mFileListNextHandle), fl);
	return mFileListNextHandle++;
}

final int maFileListNext(MAHandle list, Address nameBuf, int bufSize) {
	FileListing fl = (FileListing)mFileListings.get(new Integer(list));
	DEBUG_ASSERT(fl != null);
	String s = null;
	if(fl.last != null) {
		s = fl.last;
		fl.last = null;
	} else if(fl.en.hasMoreElements()) {
		s = (String)fl.en.nextElement();
	}
	if(s != null) {
		int res = writeStringBuf(s, nameBuf, bufSize);
		if(res >= bufSize)
			fl.last = s;
		return res;
	} else {
		return 0;
	}
}

final int maFileListClose(MAHandle list) throws IOException {
	Integer key = new Integer(list);
	FileListing fl = (FileListing)mFileListings.get(key);
	if(fl.fc != null)
		fl.fc.close();
	return mFileListings.remove(key) == null ? FLERR_GENERIC : 0;
}
