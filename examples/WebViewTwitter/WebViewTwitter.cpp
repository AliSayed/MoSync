/*
Copyright (C) 2011 MoSync AB

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License,
version 2, as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301, USA.
*/

/**
 * @file WebViewLoveSMS.cpp
 * @author Mikael Kindborg
 *
 * Application for sending Love SMSs.
 *
 * This program illustrates how to use WebView for the
 * user interface of a MoSync C++ application.
 *
 * An application can divide the program code between the
 * WebView layer and the C++ layer in a variety of ways.
 * In one extreme, the WebView is used purely for
 * rendering the user interface, the HTML/CSS/JavaScript
 * code could even be generated by C++ code. In the other
 * extreme, almost the entire application is written in
 * HTML/CSS/JavaScript, and only the calls needed to access
 * native functionality via the MoSync API is written in C++.
 *
 * Which approach is chosen depends on the preferences of the
 * development team, existing code and libraries, compatibility
 * considerations etc. Some teams may prefer to be C++ centric,
 * white others may prefer to do most of the development using
 * JavScript and web technologies.
 *
 * In this application, much of the application logic is written
 * in JavaScript, and the C++ layer is used for sending text
 * messages and for saving/loading the phone number entered
 * in the user interface. There is only one phone number saved,
 * because, after all, this is an application to be used with
 * your loved one. ;-)
 */

#include <ma.h>				// MoSync API (base API).
#include <maheap.h>			// C memory allocation functions.
#include <mastring.h>		// C String functions.
#include <mavsprintf.h>		// sprintf etc.
#include <MAUtil/String.h>	// Class String.
#include <IX_WIDGET.h>		// Widget API.
#include <conprint.h>		// Debug logging, must build in debug mode
// Included to provide the basic connection functionality.
#include <MAUtil/Connection.h>
// Include the library that provides atoi function, which converts the contents of an array to an int.
#include <mastdlib.h>


// for log messages to display.
#include "MAHeaders.h"		// Resource identifiers, not a physical file.
#include "WebViewUtil.h"	// Classes Platform and WebViewMessage.

using namespace MoSync;

// Set to true to actually send SMS.
// You can turn off SMS sending during debugging
// by setting this variable to false.
static bool G_SendSMSForReal = true;


#define CONNECTION_BUFFER_SIZE 2048
/**
 * The application class.
 */
class WebViewTwitterApp
{
private:
	MAWidgetHandle mScreen;
	MAWidgetHandle mWebView;
	Platform* mPlatform;

public:
	WebViewTwitterApp()
	{
		mPlatform = Platform::create();
		createUI();
	}

	virtual ~WebViewTwitterApp()
	{
		destroyUI();
	}

	void createUI()
	{
		// Create the screen that will hold the web view.
		mScreen = maWidgetCreate(MAW_SCREEN);
		widgetShouldBeValid(mScreen, "Could not create screen");

		// Create the web view.
		mWebView = createWebView();

		// We need to copy the bundle with HTML/Media files to
		// the application's local storage directory. The WebView
		// will load the files from that location.
		mPlatform->extractLocalFiles();

		// Now we set the main page. This will load the page
		// we saved, which in turn will load the background icon.
		maWidgetSetProperty(mWebView, "url", "index.html");

		// Add the web view to the screen.
		maWidgetAddChild(mScreen, mWebView);

		// Show the screen.
		maWidgetScreenShow(mScreen);
	}

	MAWidgetHandle createWebView()
	{
		// Create web view
		MAWidgetHandle webView = maWidgetCreate(MAW_WEB_VIEW);
		widgetShouldBeValid(webView, "Could not create web view");

		// Set size of web view to fill the parent.
		maWidgetSetProperty(webView, "width", "-1");
		maWidgetSetProperty(webView, "height", "-1");

		// Disable zooming to make page display in readable size
		// on all devices.
		maWidgetSetProperty(webView, "enableZoom", "false");

		// Register a handler for JavaScript messages.
		WebViewMessage::getMessagesFor(webView);

		return webView;
	}

	void destroyUI()
	{
		maWidgetDestroy(mScreen);
		delete mPlatform;
	}

	void runEventLoop()
	{
		MAEvent event;

		bool isRunning = true;
		while (isRunning)
		{
			maWait(0);
			maGetEvent(&event);
			switch (event.type)
			{
				case EVENT_TYPE_CLOSE:
					isRunning = false;
					break;

				case EVENT_TYPE_KEY_PRESSED:
					if (event.key == MAK_BACK)
					{
						isRunning = false;
					}
					break;

				case EVENT_TYPE_WIDGET:
					handleWidgetEvent((MAWidgetEventData*) event.data);
					break;
				default:
					break;
			}
		}
	}

	void handleWidgetEvent(MAWidgetEventData* widgetEvent)
	{
		// Handle messages from the WebView widget.
		if (MAW_EVENT_WEB_VIEW_HOOK_INVOKED == widgetEvent->eventType &&
			MAW_CONSTANT_HARD == widgetEvent->hookType)
		{
			// Get message.
			WebViewMessage message(widgetEvent->urlData);

			if (message.is("addToFavorites"))
			{
				// Save phone no and send SMS.
				saveUser(message.getParam(0));
			}
			else if (message.is("PageLoaded"))
			{
				// Load and set saved phone number.
				// We could implement a JavaScript File API to do
				// this, which would be a much more general way.
				loadFavorites();
			}
		}
	}

	void loadFavorites()
	{
		MAUtil::String userList = loadUsers();
		char jsFunction[256];
		sprintf(jsFunction, "javascript:setFavorites('%s')",userList.c_str());
		maWidgetSetProperty(mWebView, "url", jsFunction);
	}

	void saveUser(const MAUtil::String&  user)
	{
		MAUtil::String userList = loadUsers();
		if(userList == "")
		{
			userList += user;
		}
		else if (userList.find(user) < 0)
		{
			userList += ",";
			userList += user;
		}
		else
		{
			callJS("alert('User already in the list')");
			return;
		}
		mPlatform->writeTextToFile(usersPath(), userList);
		char jsFunction[256];
		sprintf(jsFunction, "javascript:setFavorites('%s')",userList.c_str());
		maWidgetSetProperty(mWebView, "url", jsFunction);

		callJS("alert('User added to favorites')");
	}

	MAUtil::String loadUsers()
	{
		MAUtil::String userList;
		bool success = mPlatform->readTextFromFile(usersPath(), userList);
		if (success)
		{
			return userList;
		}
		else
		{
			return "";
		}
	}

	MAUtil::String usersPath()
	{
		return mPlatform->getLocalPath() + "SavedUsers";
	}

	/**
	 * Call a JavaScript function.
	 */
	void callJSFunction(const MAUtil::String& fun)
	{
		char code[512];
		sprintf(code, "%s()", fun.c_str());
		callJS(code);
	}

	/**
	 * Run JavaScript code.
	 */
	void callJS(const MAUtil::String& code)
	{
		char script[512];
		sprintf(script, "javascript:%s", code.c_str());
		maWidgetSetProperty(mWebView, "url", script);
	}



	void widgetShouldBeValid(MAWidgetHandle widget, const char* panicMessage)
	{
		if (widget <= 0)
		{
			maPanic(0, panicMessage);
		}
	}

};
// End of class WebViewTwitterApp

/**
 * Main function that is called when the program starts.
 */
extern "C" int MAMain()
{
	WebViewTwitterApp app;
	app.runEventLoop();
	return 0;
}
