/*
Copyright (C) 2011 MoSync AB

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License,
version 2, as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301, USA.
*/

/**
 * @file WidgetManager.h
 * @author Mikael Kindborg
 *
 * The WidgetManager manages widget events and dispatches
 * them to the target widgets.
 */

#ifndef MOSYNC_UI_WIDGETMANAGER_H_
#define MOSYNC_UI_WIDGETMANAGER_H_

#include <ma.h>
#include <MAUtil/String.h>
#include <MAUtil/Map.h>
#include <MAUtil/Environment.h>
#include <IX_WIDGET.h>
#include "WidgetEventListener.h"
#include "Widget.h"

namespace MoSync
{
	namespace UI
	{

	/**
	 * Class that handles widget events.
	 */
	class WidgetManager : public MAUtil::CustomEventListener
	{
	public:
		/**
		 * Destructor.
		 */
		virtual ~WidgetManager();

		/**
		 * Return the single instance of this class.
		 */
		static WidgetManager* getInstance();

		/**
		 * Implementation of CustomEventListener interface.
		 * This method will get called whenever there is a
		 * widget event generated by the system.
		 */
		virtual void customEvent(const MAEvent& event);

		/**
		 * Add a widget to the map that holds widgets.
		 */
		virtual void registerWidget(MAHandle widgetHandle, Widget* widget);

		/**
		 * Remove a widget from the map that holds widgets.
		 */
		virtual void unregisterWidget(MAHandle widgetHandle, Widget* widget);

	protected:
		/**
		 * Constructor is protected since this is a singleton.
		 * (subclasses can still create instances).
		 */
		WidgetManager();

	private:
		/**
		 * Error handling for devices that do not support NativeUI.
		 * Here we throw a panic if NativeUI is not supported.
		 */
		void checkNativeUISupport(int result);

		/**
		 * The single instance of this class.
		 */
		static WidgetManager* sInstance;

		/**
		 * Dictionary of widgets identified by widget handle.
		 */
		MAUtil::Map<MAHandle, Widget*> mWidgetMap;
	};

	} // namespace UI
} // namespace MoSync

#endif
